# -*- coding: utf-8 -*-
"""XGBOOST-TIMESERIES.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cDUZYn2UYPSB0e51sn5gxZngdNCxaeFK
"""

import numpy as np
import pandas as pd
import os
import matplotlib.pyplot as plt
from scipy.stats import pearsonr
from sklearn.preprocessing import MinMaxScaler
import tensorflow as tf
import xgboost as xgb
import xgboost as xgb
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score

zip_path = tf.keras.utils.get_file(
    origin='https://storage.googleapis.com/tensorflow/tf-keras-datasets/jena_climate_2009_2016.csv.zip',
    fname='jena_climate_2009_2016.csv.zip',
    extract=True)
csv_path, _ = os.path.splitext(zip_path)

df = pd.read_csv(csv_path)
df
df = df[5::6]
df

df.index = pd.to_datetime(df['Date Time'], format='%d.%m.%Y %H:%M:%S')
df[:26]

temp = df['T (degC)']
temp.plot()

def df_to_X_y(df, window_size=5):
  df_as_np = df.to_numpy()
  X = []
  y = []
  for i in range(len(df_as_np)-window_size):
    row = [[a] for a in df_as_np[i:i+window_size]]
    X.append(row)
    label = df_as_np[i+window_size]
    y.append(label)

WINDOW_SIZE = 5
X1, y1 = df_to_X_y(temp, WINDOW_SIZE)
X1.shape, y1.shape

dtest = xgb.DMatrix(test_features)
predictions = model.predict(dtest)

rmse = ((predictions - test_label) ** 2).mean() ** 0.5
print('RMSE:', rmse)

import matplotlib.pyplot as plt

plt.plot(test_label.index[:50], test_label.values[:50], label='Actual')
plt.plot(test_label.index[:50], predictions[:50], label='Predicted')
plt.xlabel('Date')
plt.ylabel('Temperature (degC)')
plt.legend()
plt.show()

plt.plot(train_label.index[:50], train_label.values[:50], label='Actual')
plt.plot(train_label.index[:50], predictions_train[:50], label='Predicted')
plt.xlabel('Date')
plt.ylabel('Temperature (degC)')
plt.legend()
plt.show()

plt.scatter(train_label[:50], predictions_train[:50])
plt.xlabel('Actual Temperature')
plt.ylabel('Predicted Temperature')
plt.title('Training Set (50 instances)')
plt.show()

plt.scatter(test_label[:50], predictions[:50])
plt.xlabel('Actual Temperature')
plt.ylabel('Predicted Temperature')
plt.title('Test Set (50 instances)')
plt.show()

from sklearn.model_selection import cross_val_score


model = xgb.XGBRegressor(n_estimators=100, max_depth=10)


scores = cross_val_score(model, train_data, train_label, cv=5)


print('Cross-validation scores:', scores)
print('Average score:', np.mean(scores))

train_mse = mean_squared_error(train_label, predictions_train)
train_rmse = np.sqrt(train_mse)
train_mae = mean_absolute_error(train_label, predictions_train)
test_mse = mean_squared_error(test_label, predictions)
test_rmse = np.sqrt(test_mse)
test_mae = mean_absolute_error(test_label, predictions)

print('Training MSE: {:.2f}'.format(train_mse))
print('Training RMSE: {:.2f}'.format(train_rmse))
print('Training MAE: {:.2f}'.format(train_mae))
print('Test MSE: {:.2f}'.format(test_mse))
print('Test RMSE: {:.2f}'.format(test_rmse))
print('Test MAE: {:.2f}'.format(test_mae))





